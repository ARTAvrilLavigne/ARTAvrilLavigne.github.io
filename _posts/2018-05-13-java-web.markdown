---
layout:     post
title:      "mybatis总结"
subtitle:   " \"welcome to ARTAvrilLavigne Blog\""
date:       2018-05-13 18:49:00
author:     "ARTAvrilLavigne"
header-img: "img/post-bg-2015.jpg"
tags:
    - javaee
---
## mybatis知识总结<br>

　　**pojo**:不按mvc分层,只是java bean有一些属性,还有get、set方法<br>
　　**domain**:不按mvc分层,只是java bean有一些属性,还有get、set方法<br>
　　**po**:用在持久层,还可以再增加或者修改的时候,从页面直接传入action中,它里面的java bean 类名等于表名,属性名等于表的字段名,还有对应的get、set方法<br>
　　**vo**: view object表现层对象,主要用于在高级查询中从页面接收传过来的各种参数.好处是扩展性强<br>
　　**bo**: 用在servie层,现在企业基本不用.<br>

这些**po,vo, bo,pojo**可以用在各种层面吗？<br>
　　可以,也就是po用在表现层,vo用在持久层不报错,因为都是普通的java bean没有语法错误.但是在企业最好不要混着用,因为这些都是设计的原则,混着用比较乱.不利于代码维护.<br>

自学方法论: 理论 -> 实践 -> 理论 -> 实践  反复迭代三遍<br>

总结:<br>
1. mybatis是一个持久层框架, 作用是跟数据库交互完成增删改查<br>

2. 原生Dao实现(需要接口和实现类)<br>

3. 动态代理方式(只需要接口)<br>
	　　mapper接口代理实现编写规则:<br>
	　　1)映射文件中namespace要等于接口的全路径名称<br>
	　　2)映射文件中sql语句id要等于接口的方法名称<br>
	　　3)映射文件中传入参数类型要等于接口方法的传入参数类型<br>
	　　4)映射文件中返回结果集类型要等于接口方法的返回值类型<br>

4. **#{}占位符**:占位<br>
	如果传入的是基本类型,那么#{}中的变量名称可以随意写<br>
	如果传入的参数是pojo类型,那么#{}中的变量名称必须是pojo中的属性.属性.属性...<br>

5. **${}拼接符**:字符串原样拼接<br>
	如果传入的是基本类型,那么${}中的变量名必须是value<br>
	如果传入的参数是pojo类型,那么${}中的变量名称必须是pojo中的属性.属性.属性...<br>
	注意:使用拼接符有可能造成sql注入,在页面输入的时候可以加入校验,不可输入sql关键字,不可输入空格<br>
6. 映射文件:<br>
	1)传入参数类型通过parameterType属性指定<br>
	2)返回结果集类型通过resultType属性指定<br>
7. **hibernate和mybatis区别:**<br>
	**hibernate:它是一个标准的orm框架,比较重量级,学习成本高.**<br>
		　　**优点:高度封装,使用起来不用写sql,开发的时候,会减低开发周期.**<br>
		　　**缺点:sql语句无法优化**<br>
		　　**应用场景:oa(办公自动化系统), erp(企业的流程系统)等,还有一些政府项目等**<br>
		   　　  **总的来说,在用于量不大,并发量小的时候使用.**<br>
	**mybatis:它不是一个orm框架, 它是对jdbc的轻量级封装, 学习成本低,比较简单**<br>
		　　**优点:学习成本低, sql语句可以优化, 执行效率高,速度快**<br>
		　　**缺点:编码量较大,会拖慢开发周期**<br>
		　　**应用场景: 互联网项目,比如电商,P2P理财等**<br>
		    　　 **总的来说是用户量较大,并发高的项目.**<br>  
		     
==========================================================================================<br>  

1. 输入映射(就是映射文件中可以传入哪些参数类型)<br>
	　　1)基本类型<br>
	　　2)pojo类型<br>
	　　3)Vo类型<br>
2. 输出映射(返回的结果集可以有哪些类型)<br>
	　　1)基本类型<br>
	　　2)pojo类型<br>
	　　3)List类型<br>
3. 动态sql:动态的拼接sql语句,因为sql中where条件有可能多也有可能少<br>
	　　1)where:可以自动添加where关键字,还可以去掉第一个条件的and关键字<br>
	　　2)if:判断传入的参数是否为空<br>
	　　3)foreach:循环遍历传入的集合参数<br>
	　　4)sql:封装查询条件,以达到重用的目的<br>

4. 对单个对象的映射关系:<br>
	　　1)自动关联(偷懒的办法):可以自定义一个大而全的pojo类,然后自动映射其实是根据数据库<br>
		　　总的字段名称和pojo中的属性名称对应.<br>
	　　2)手动关联: 需要指定数据库中表的字段名称和java的pojo类中的属性名称的对应关系.<br>
		　　使用association标签<br>
5. 对集合对象的映射关系<br>
	　　只能使用手动映射:指定表中字段名称和pojo中属性名称的对应关系<br>
		　　使用collection标签<br>
6. spring和mybatis整合<br>
	　　整合后会话工厂都归spring管理<br>
	　　1)原生Dao实现:<br>
		　　需要在spring配置文件中指定dao实现类<br>
		　　dao实现类需要继承SqlSessionDaoSupport超类<br>
		　　在dao实现类中不要手动关闭会话,不要自己提交事务.<br>
	　　2)Mapper接口代理实现:<br>
		　　在spring配置文件中可以使用包扫描的方式,一次性的将所有mapper加载<br>

7. 逆向工程:自动生成Pojo类,还可以自动生成Mapper接口和映射文件<br>
	　　注意:生成的方式是追加而不是覆盖,所以不可以重复生成,重复生成的文件有问题.<br>
		　　如果想重复生成将原来生成的文件删除<br>
	
