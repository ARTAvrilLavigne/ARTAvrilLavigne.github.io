---
layout:     post
title:      "mybatis总结"
subtitle:   " \"welcome to ARTAvrilLavigne Blog\""
date:       2018-05-13 18:49:00
author:     "ARTAvrilLavigne"
header-img: "img/post-bg-2015.jpg"
tags:
    - javaee
---
## 一、mybatis知识总结<br>

　　**pojo**:不按mvc分层,只是java bean有一些属性,还有get、set方法<br>
　　**domain**:不按mvc分层,只是java bean有一些属性,还有get、set方法<br>
　　**po**:用在持久层,还可以再增加或者修改的时候,从页面直接传入action中,它里面的java bean 类名等于表名,属性名等于表的字段名,还有对应的get、set方法<br>
　　**vo**: view object表现层对象,主要用于在高级查询中从页面接收传过来的各种参数.好处是扩展性强<br>
　　**bo**: 用在servie层,现在企业基本不用.<br>

这些**po,vo, bo,pojo**可以用在各种层面吗？<br>
　　可以,也就是po用在表现层,vo用在持久层不报错,因为都是普通的java bean没有语法错误.但是在企业最好不要混着用,因为这些都是设计的原则,混着用比较乱.不利于代码维护.<br>

自学方法论: 理论 -> 实践 -> 理论 -> 实践  反复迭代三遍<br>

总结:<br>
1. mybatis是一个持久层框架, 作用是跟数据库交互完成增删改查<br>

2. 原生Dao实现(需要接口和实现类)<br>

3. 动态代理方式(只需要接口)<br>
	　　mapper接口代理实现编写规则:<br>
	　　1)映射文件中namespace要等于接口的全路径名称<br>
	　　2)映射文件中sql语句id要等于接口的方法名称<br>
	　　3)映射文件中传入参数类型要等于接口方法的传入参数类型<br>
	　　4)映射文件中返回结果集类型要等于接口方法的返回值类型<br>

4. **#{}占位符**:占位<br>
	如果传入的是基本类型,那么#{}中的变量名称可以随意写<br>
	如果传入的参数是pojo类型,那么#{}中的变量名称必须是pojo中的属性.属性.属性...<br>

5. **${}拼接符**:字符串原样拼接<br>
	如果传入的是基本类型,那么${}中的变量名必须是value<br>
	如果传入的参数是pojo类型,那么${}中的变量名称必须是pojo中的属性.属性.属性...<br>
	注意:使用拼接符有可能造成sql注入,在页面输入的时候可以加入校验,不可输入sql关键字,不可输入空格<br>
6. 映射文件:<br>
	1)传入参数类型通过parameterType属性指定<br>
	2)返回结果集类型通过resultType属性指定<br>
7. **hibernate和mybatis区别:**<br>
	**hibernate:它是一个标准的orm框架,比较重量级,学习成本高.**<br>
		　　**优点:高度封装,使用起来不用写sql,开发的时候,会减低开发周期.**<br>
		　　**缺点:sql语句无法优化**<br>
		　　**应用场景:oa(办公自动化系统), erp(企业的流程系统)等,还有一些政府项目等**<br>
		   　　  **总的来说,在用于量不大,并发量小的时候使用.**<br>
	**mybatis:它不是一个orm框架, 它是对jdbc的轻量级封装, 学习成本低,比较简单**<br>
		　　**优点:学习成本低, sql语句可以优化, 执行效率高,速度快**<br>
		　　**缺点:编码量较大,会拖慢开发周期**<br>
		　　**应用场景: 互联网项目,比如电商,P2P理财等**<br>
		    　　 **总的来说是用户量较大,并发高的项目.**<br>  
		     
==========================================================================================<br>  

1. 输入映射(就是映射文件中可以传入哪些参数类型)<br>
	　　1)基本类型<br>
	　　2)pojo类型<br>
	　　3)Vo类型<br>
2. 输出映射(返回的结果集可以有哪些类型)<br>
	　　1)基本类型<br>
	　　2)pojo类型<br>
	　　3)List类型<br>
3. 动态sql:动态的拼接sql语句,因为sql中where条件有可能多也有可能少<br>
	　　1)where:可以自动添加where关键字,还可以去掉第一个条件的and关键字<br>
	　　2)if:判断传入的参数是否为空<br>
	　　3)foreach:循环遍历传入的集合参数<br>
	　　4)sql:封装查询条件,以达到重用的目的<br>

4. 对单个对象的映射关系:<br>
	　　1)自动关联(偷懒的办法):可以自定义一个大而全的pojo类,然后自动映射其实是根据数据库<br>
		　　总的字段名称和pojo中的属性名称对应.<br>
	　　2)手动关联: 需要指定数据库中表的字段名称和java的pojo类中的属性名称的对应关系.<br>
		　　使用association标签<br>
5. 对集合对象的映射关系<br>
	　　只能使用手动映射:指定表中字段名称和pojo中属性名称的对应关系<br>
		　　使用collection标签<br>
6. spring和mybatis整合<br>
	　　整合后会话工厂都归spring管理<br>
	　　1)原生Dao实现:<br>
		　　需要在spring配置文件中指定dao实现类<br>
		　　dao实现类需要继承SqlSessionDaoSupport超类<br>
		　　在dao实现类中不要手动关闭会话,不要自己提交事务.<br>
	　　2)Mapper接口代理实现:<br>
		　　在spring配置文件中可以使用包扫描的方式,一次性的将所有mapper加载<br>

7. 逆向工程:自动生成Pojo类,还可以自动生成Mapper接口和映射文件<br>
	　　注意:生成的方式是追加而不是覆盖,所以不可以重复生成,重复生成的文件有问题.<br>
		　　如果想重复生成将原来生成的文件删除<br>
	
## 二、mybatis最初原始使用步骤总结<br>

* 1)配置mybatis-config.xml 全局的配置文件 (1、数据源，2、外部的mapper)<br>
* 2)创建SqlSessionFactory<br>
* 3)通过SqlSessionFactory创建SqlSession对象<br>
* 4)通过SqlSession操作数据库 CRUD<br>
* 5)调用session.commit()提交事务<br>
* 6)调用session.close()关闭会话<br>

### 2.1、引入依赖（pom.xml）<br>
```
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.2.8</version>
</dependency>
```
### 2.2、全局配置文件（mybatis-config.xml）<br>
```
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- 根标签 -->
<configuration>
<properties>
	<property name="driver" value="com.mysql.jdbc.Driver"/>
	<property name="url" value="jdbc:mysql://127.0.0.1:3306/mybatis-110?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true"/>
	<property name="username" value="root"/>
    	<property name="password" value="123456"/>
   </properties>

   <!-- 环境，可以配置多个，default：指定采用哪个环境 -->
   <environments default="test">
      <!-- id：唯一标识 -->
      <environment id="test">
         <!-- 事务管理器，JDBC类型的事务管理器 -->
         <transactionManager type="JDBC" />
         <!-- 数据源，池类型的数据源 -->
         <dataSource type="POOLED">
            <property name="driver" value="com.mysql.jdbc.Driver" />
            <property name="url" value="jdbc:mysql://127.0.0.1:3306/mybatis-110" />
            <property name="username" value="root" />
            <property name="password" value="123456" />
         </dataSource>
      </environment>
      <environment id="development">
         <!-- 事务管理器，JDBC类型的事务管理器 -->
         <transactionManager type="JDBC" />
         <!-- 数据源，池类型的数据源 -->
         <dataSource type="POOLED">
            <property name="driver" value="${driver}" /> <!-- 配置了properties，所以可以直接引用 -->
            <property name="url" value="${url}" />
            <property name="username" value="${username}" />
            <property name="password" value="${password}" />
         </dataSource>
      </environment>
   </environments>
  </configuration>
```
### 2.3、配置Map.xml（MyMapper.xml）<br>
```
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 -->
<mapper namespace="MyMapper">
   <!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一
      resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表
    -->
   <select id="selectUser" resultType="com.zpc.mybatis.User">
      select * from tb_user where id = #{id}
   </select>
</mapper>
```
### 2.4、修改全局配置文件（mybatis-config.xml）<br>
引入MyMapper.xml<br>
```
<configuration>
   <!-- 环境，可以配置多个，default：指定采用哪个环境 -->
   <environments default="test">
      <!-- id：唯一标识 -->
      <environment id="test">
         <!-- 事务管理器，JDBC类型的事务管理器 -->
         <transactionManager type="JDBC" />
         <!-- 数据源，池类型的数据源 -->
         <dataSource type="POOLED">
            <property name="driver" value="com.mysql.jdbc.Driver" />
            <property name="url" value="jdbc:mysql://127.0.0.1:3306/ssmdemo" />
            <property name="username" value="root" />
            <property name="password" value="123456" />
         </dataSource>
      </environment>
   </environments>
   <!-- 引入MyMapper.xml -->
   <mappers>
     <mapper resource="mappers/MyMapper.xml" />
   </mappers>
</configuration>
```
### 2.5、构建sqlSessionFactory（MybatisTest.java）<br>
```
// 指定全局配置文件
String resource = "mybatis-config.xml";
// 读取配置文件
InputStream inputStream = Resources.getResourceAsStream(resource);
// 构建sqlSessionFactory
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
```
### 2.6、打开sqlSession会话，并执行sql（MybatisTest.java）<br>
```
// 获取sqlSession
SqlSession sqlSession = sqlSessionFactory.openSession();
// 操作CRUD，第一个参数：指定statement，规则：命名空间+“.”+statementId
// 第二个参数：指定传入sql的参数：这里是用户id
User user = sqlSession.selectOne("MyMapper.selectUser", 1);
System.out.println(user);
```
**MybatisTest.java完整代码：**<br>
```
import com.zpc.test.pojo.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.InputStream;

public class MybatisTest {
   public static void main(String[] args) throws Exception {
      // 指定全局配置文件
      String resource = "mybatis-config.xml";
      // 读取配置文件
      InputStream inputStream = Resources.getResourceAsStream(resource);
      // 构建sqlSessionFactory
      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
      // 获取sqlSession
      SqlSession sqlSession = sqlSessionFactory.openSession();
      try {
         // 操作CRUD，第一个参数：指定statement，规则：命名空间+“.”+statementId
         // 第二个参数：指定传入sql的参数：这里是用户id
         User user = sqlSession.selectOne("MyMapper.selectUser", 1);
         System.out.println(user);
      } finally {
         sqlSession.close();
      }
   }
}
```
**User.java**<br>
```
import java.text.SimpleDateFormat;
import java.util.Date;

public class User {
    private String id;
    private String userName;
    private String password;
    private String name;
    private Integer age;
    private Integer sex;
    private Date birthday;
    private String created;
    private String updated;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public Integer getSex() {
        return sex;
    }

    public void setSex(Integer sex) {
        this.sex = sex;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    public String getCreated() {
        return created;
    }

    public void setCreated(String created) {
        this.created = created;
    }

    public String getUpdated() {
        return updated;
    }

    public void setUpdated(String updated) {
        this.updated = updated;
    }

    @Override
    public String toString() {
        return "User{" +
                "id='" + id + '\'' +
                ", userName='" + userName + '\'' +
                ", password='" + password + '\'' +
                ", name='" + name + '\'' +
                ", age=" + age +
                ", sex=" + sex +
                ", birthday='" + new SimpleDateFormat("yyyy-MM-dd").format(birthday) + '\'' +
                ", created='" + created + '\'' +
                ", updated='" + updated + '\'' +
                '}';
    }
}
```

## 三、完整的CRUD操作(非动态代理方式，不推荐)<br>

3.1、创建UserDao接口<br>
```
import com.zpc.mybatis.pojo.User;
import java.util.List;

public interface UserDao {

    /**
     * 根据id查询用户信息
     *
     * @param id
     * @return
     */
    public User queryUserById(String id);

    /**
     * 查询所有用户信息
     *
     * @return
     */
    public List<User> queryUserAll();

    /**
     * 新增用户
     *
     * @param user
     */
    public void insertUser(User user);

    /**
     * 更新用户信息
     *
     * @param user
     */
    public void updateUser(User user);

    /**
     * 根据id删除用户信息
     *
     * @param id
     */
    public void deleteUser(String id);
}
```

3.2、创建UserDaoImpl<br>
```
import com.zpc.mybatis.dao.UserDao;
import com.zpc.mybatis.pojo.User;
import org.apache.ibatis.session.SqlSession;
import java.util.List;

public class UserDaoImpl implements UserDao {
    public SqlSession sqlSession;

    public UserDaoImpl(SqlSession sqlSession) {
        this.sqlSession = sqlSession;
    }

    @Override
    public User queryUserById(String id) {
        return this.sqlSession.selectOne("UserDao.queryUserById", id);
    }

    @Override
    public List<User> queryUserAll() {
        return this.sqlSession.selectList("UserDao.queryUserAll");
    }

    @Override
    public void insertUser(User user) {
        this.sqlSession.insert("UserDao.insertUser", user);
    }

    @Override
    public void updateUser(User user) {
        this.sqlSession.update("UserDao.updateUser", user);
    }

    @Override
    public void deleteUser(String id) {
        this.sqlSession.delete("UserDao.deleteUser", id);
    }

}
```

3.3、编写UserDao对应的UserDaoMapper.xml<br>
```
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 -->
<mapper namespace="UserDao">
    <!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一
       resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表
     -->
    <!--<select id="queryUserById" resultType="com.zpc.mybatis.pojo.User">-->
    <!--select * from tb_user where id = #{id}-->
    <!--</select>-->

    <!--使用别名-->
    <select id="queryUserById" resultType="com.zpc.mybatis.pojo.User">
      select
       tuser.id as id,
       tuser.user_name as userName,
       tuser.password as password,
       tuser.name as name,
       tuser.age as age,
       tuser.birthday as birthday,
       tuser.sex as sex,
       tuser.created as created,
       tuser.updated as updated
       from
       tb_user tuser
       where tuser.id = #{id};
   </select>

    <select id="queryUserAll" resultType="com.zpc.mybatis.pojo.User">
        select * from tb_user;
    </select>

    <!--插入数据-->
    <insert id="insertUser" parameterType="com.zpc.mybatis.pojo.User">
        INSERT INTO tb_user (
        user_name,
        password,
        name,
        age,
        sex,
        birthday,
        created,
        updated
        )
        VALUES
        (
        #{userName},
        #{password},
        #{name},
        #{age},
        #{sex},
        #{birthday},
        now(),
        now()
        );
    </insert>

    <update id="updateUser" parameterType="com.zpc.mybatis.pojo.User">
        UPDATE tb_user
        <trim prefix="set" suffixOverrides=",">
            <if test="userName!=null">user_name = #{userName},</if>
            <if test="password!=null">password = #{password},</if>
            <if test="name!=null">name = #{name},</if>
            <if test="age!=null">age = #{age},</if>
            <if test="sex!=null">sex = #{sex},</if>
            <if test="birthday!=null">birthday = #{birthday},</if>
            updated = now(),
        </trim>
        WHERE
        (id = #{id});
    </update>

    <delete id="deleteUser">
        delete from tb_user where id=#{id}
    </delete>
</mapper>
```
然后需要在mybatis-config.xml中添加配置：<br>
```
<mappers>
    <!-- 第一种方式：使用相对于类路径的资源引用 -->
    <mapper resource="mappers/UserDaoMapper.xml"/>
    <!-- 第二种方式：注解方式可以使用如下配置方式 -->
    <mapper class="com.zpc.mybatis.dao.UserMapper"/>
</mappers>
```

## 四、动态代理Mapper实现类(推荐)<br>
**动态代理总结：**<br>
　　使用mapper接口不用写接口实现类即可完成数据库操作，使用非常简单，也是官方所推荐的使用方法。使用mapper接口的必须具备以下几个条件：<br>
* Mapper的namespace必须和mapper接口的全路径一致<br>
* Mapper接口的方法名必须和sql定义的id一致<br>
* Mapper接口中方法的输入参数类型必须和sql定义的parameterType一致<br>
* Mapper接口中方法的输出参数类型必须和sql定义的resultType/resultMap一致<br>

### 4.1、创建UserMapper接口（对应原UserDao）<br>

```
public interface UserMapper {
   
   /**
    * 登录（直接使用注解指定传入参数名称）
    * @param userName
    * @param password
    * @return
    */
   public User login(@Param("userName") String userName, @Param("password") String password);
   
   /**
    * 根据表名查询用户信息（直接使用注解指定传入参数名称）
    * @param tableName
    * @return
    */
   public List<User> queryUserByTableName(@Param("tableName") String tableName);
   
   /**
    * 根据Id查询用户信息
    * @param id
    * @return
    */
   public User queryUserById(Long id);
   
   /**
    * 查询所有用户信息
    * @return
    */
   public List<User> queryUserAll();
   
   /**
    * 新增用户信息
    * @param user
    */
   public void insertUser(User user);
   
   /**
    * 根据id更新用户信息
    * @param user
    */
   public void updateUser(User user);
   
   /**
    * 根据id删除用户信息
    * @param id
    */
   public void deleteUserById(Long id);
}
```
### 4.2、创建UserMapper.xml<br>

```
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 ，为了使用接口动态代理，这里必须是接口的全路径名-->
<mapper namespace="com.zpc.mybatis.dao.UserMapper">
    <!--
       1.#{},预编译的方式preparedstatement，使用占位符替换，防止sql注入，一个参数的时候，任意参数名可以接收
       2.${},普通的Statement，字符串直接拼接，不可以防止sql注入，一个参数的时候，必须使用${value}接收参数
     -->
    <select id="queryUserByTableName" resultType="com.zpc.mybatis.pojo.User">
        select * from ${tableName}
    </select>

    <select id="login" resultType="com.zpc.mybatis.pojo.User">
        select * from tb_user where user_name = #{userName} and password = #{password}
    </select>

    <!-- statement，内容：sql语句。
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       resultType：sql语句查询结果集的封装类型，使用动态代理之后和方法的返回类型一致；resultMap：二选一
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <select id="queryUserById" resultType="com.zpc.mybatis.pojo.User">
        select * from tb_user where id = #{id}
    </select>
    <select id="queryUserAll" resultType="com.zpc.mybatis.pojo.User">
        select * from tb_user
    </select>
    <!-- 新增的Statement
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
       useGeneratedKeys:开启主键回写
       keyColumn：指定数据库的主键
       keyProperty：主键对应的pojo属性名
     -->
    <insert id="insertUser" useGeneratedKeys="true" keyColumn="id" keyProperty="id"
            parameterType="com.zpc.mybatis.pojo.User">
        INSERT INTO tb_user (
        id,
        user_name,
        password,
        name,
        age,
        sex,
        birthday,
        created,
        updated
        )
        VALUES
        (
        null,
        #{userName},
        #{password},
        #{name},
        #{age},
        #{sex},
        #{birthday},
        NOW(),
        NOW()
        );
    </insert>
    <!-- 
       更新的statement
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <update id="updateUser" parameterType="com.zpc.mybatis.pojo.User">
        UPDATE tb_user
        <trim prefix="set" suffixOverrides=",">
            <if test="userName!=null">user_name = #{userName},</if>
            <if test="password!=null">password = #{password},</if>
            <if test="name!=null">name = #{name},</if>
            <if test="age!=null">age = #{age},</if>
            <if test="sex!=null">sex = #{sex},</if>
            <if test="birthday!=null">birthday = #{birthday},</if>
            updated = now(),
        </trim>
        WHERE
        (id = #{id});
    </update>
    <!-- 
       删除的statement
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <delete id="deleteUserById" parameterType="java.lang.String">
        delete from tb_user where id=#{id}
    </delete>
</mapper>
```

### 4.3、全局配置文件mybatis-config.xml引入UserMapper.xml<br>

```
<mappers>
    <!-- 第一种方式：使用相对于类路径的资源引用 -->
    <mapper resource="mappers/UserMapper.xml"/>
    <!-- 第二种方式：注解方式可以使用如下配置方式 -->
    <mapper class="com.zpc.mybatis.dao.UserMapper"/>
</mappers>
```

## 五、Mapper XML文件详解<br>
### 5.1、#{}和${}区别<br>
* #{}只是表示占位，与参数的名字无关，如果只有一个参数会自动对应，相当于PreparedStatement使用占位符去替换参数，可以防止sql注入。(相当于会加一对引号'xxxx')<br>
* ${}是进行字符串拼接，相当于sql语句中的Statement，使用字符串去拼接sql；$可以是sql中的任一部分传入到Statement中，不能防止sql注入。<br>

```
1、=======================推荐=======================

/**
 * 根据表名查询用户信息（直接使用注解指定传入参数名称）
 *
 * @param tableName
 * @return
 */
public List<User> queryUserByTableName(@Param("tableName") String tableName);

<select id="queryUserByTableName" resultType="com.zpc.mybatis.pojo.User">
    select * from ${tableName}
</select>

2、=======================#{}多个参数时=======================

/**
 * 登录（直接使用注解指定传入参数名称）
 *
 * @param userName
 * @param password
 * @return
 */
public User login( String userName, String password);

<select id="login" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user where user_name = #{userName} and password = #{password}
</select>

3、=======================报错=======================

org.apache.ibatis.exceptions.PersistenceException: 
Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter 'userName' not found. Available parameters are [0, 1, param1, param2]
Cause: org.apache.ibatis.binding.BindingException: Parameter 'userName' not found. Available parameters are [0, 1, param1, param2]

4、=======================解决方案一=======================

<select id="login" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user where user_name = #{0} and password = #{1}
</select>

5、=======================解决方案二=======================

<select id="login" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user where user_name = #{param1} and password = #{param2}
</select>

6、=======================最终解决方案=======================

/**
 * 登录（直接使用注解指定传入参数名称）
 *
 * @param userName
 * @param password
 * @return
 */
public User login(@Param("userName") String userName, @Param("password") String password);

<select id="login" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user where user_name = #{userName} and password = #{password}
</select>
```

**通常在方法的参数列表上加上一个注释@Param(“xxxx”) 显式指定参数的名字，然后通过${}或#{}**<br>
**sql语句动态生成的时候，使用${}**<br>
**sql语句中某个参数进行占位的时候#{}**<br>
<br>
面试题（#、$区别）：<br>

```
/**
 * #号
 * @param username1
 * @return
 */
User queryUserListByName1(@Param("username1") String username1);

/**
 * $号
 * @param username2
 * @return
 */
User queryUserListByName2(@Param("username2") String username2);

<select id="queryUserListByName1" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user WHERE user_name=#{username1}
</select>

<select id="queryUserListByName2" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user WHERE user_name='${username2}'//手动加了引号
</select>
```

### 5.2、like模糊查询用法<br>
　　mybatis中对于使用like来进行模糊查询的几种方式：<br>
```
方式一：使用'%${xxxxx}%'
<select id="queryUsersLikeUserName" resultType="User">
	select * from tb_user where user_name like '%${userName}%'
</select>
注意：由于$是参数直接注入的，导致这种写法大括号里面不能注明jdbcType(如：'%${userName,jdbcType=VARCHAR}%')，不然会报错
缺点：可能会引起sql的注入，平时尽量避免使用${...}
```

```
方式二：使用"%"#{userName}"%"
<select id="queryUsersLikeUserName" resultType="User">
	select * from tb_user where user_name like "%"#{userName}"%"
</select>
注意：因为#{xxx}解析成sql语句时候，会在变量外侧自动加单引号''，所以这里 % 需要使用双引号""，不能使用单引号''，不然会查不到任何结果
```

```
方式三：使用CONCAT()函数连接参数形式
<select id="queryUsersLikeUserName" resultType="User">
	select * from tb_user where user_name like CONCAT('%',#{userName},'%')
</select>
```

### 5.3、resultMap用法<br>
　　resultMap是mybatis中最重要的元素，使用resultMap可以解决两大问题：<br>
* POJO属性名和表结构字段名不一致的问题(有些情况下也不是标准的驼峰格式)<br>
* 完成高级查询，比如说：一对一、一对多、多对多<br>

　　解决表字段名和属性名不一致的问题有两种方法：<br>
1、如果是驼峰似的命名规则可以在mybatis配置文件中设置<setting name="mapUnderscoreToCamelCase" value="true"/><br>
2、使用resultMap解决<br>

```
<!--
type：返回的结果集对应的java的实体类型
id：resultMap的唯一标识
autoMapping：默认完成映射，如果已开启驼峰匹配，可以解决驼峰匹配
-->
<resultMap type="User" id="resultUser" autoMapping="true">
   <!--
   指定主键
   cloumn：数据库中的列名
   property：java实体类中的属性名
   -->
   <id column="id" property="id"/>
   <!-- 使用result配置数据库列名和java实体类中的属性名对应 -->
   <result column="user_name" property="userName"/>
</resultMap>

======使用======
<select id="queryUserById" resultMap="resultUser">
   select * from tb_user where id = #{id}
</select>
```

### 5.4、sql抽取使用<br>
格式：<br>
```
<sql id="xxxx"></sql>
<include refId="xxxx" />
```
例如：在UserMapper.xml中定义如下片段：<br>
```
<sql id="commonSql">
		id,
		user_name,
		password,
		name,
		age,
		sex,
		birthday,
		created,
		updated	
</sql>

则可以在UserMapper.xml中使用它：
<select id="queryUserById" resultMap="userResultMap">
	select <include refid="commonSql"></include> from tb_user where id = #{id}
</select>

<select id="queryUsersLikeUserName" resultType="User">
	select <include refid="commonSql"></include> from tb_user where user_name like "%"#{userName}"%"
</select>
```

## 六、动态sql<br>
　　动态sql用法有：<br>
* if标签<br>
* choose、when、otherwise标签<br>
* where、set标签<br>
* foreach标签<br>
* trim标签<br>

### 6.1、if标签<br>

```
字符串String类型：
<select id="queryUserList" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user WHERE sex=1
    <if test="name!=null and name.trim()!=''">
      and name like '%${name}%'
    </if>
</select>

<select id="queryUserList" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user WHERE sex=1
    <if test="name!=null and name!=''">
      and name=#{name}
    </if>
</select>

整型int类型：
<select id="queryUserList" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user WHERE sex=1
    <if test="taskId!=null and taskId!=''">
      and taskId=#{taskId}
    </if>
</select>
注意：当传入的taskId为0时，此if条件语句是进不去的。因为Mybatis中if标签中比较传入数字taskId和字符串''时，会把这个字符串''转换成数字0,然后再和这个数字taskId判断，因此该if条件语句进不去

解决：如果存在taskId为0的情况，则改为如下所示：
<select id="queryUserList" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user WHERE sex=1
    <if test="taskId!=null and taskId!='' or taskId==0">
      and taskId=#{taskId}
    </if>
</select>
```

### 6.2、choose、when、otherwise标签<br>

```
<select id="queryUserListByNameOrAge" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user where sex=1
    <!--
    1.一旦有条件成立的when，后续的when则不会执行
    2.当所有的when都不执行时,才会执行otherwise
    -->
    <choose>
        <when test="name!=null and name!=''">
            and name like '%${name}%'
        </when>
        <when test="age!=null">
            and age = #{age}
        </when>
        <otherwise>
            and name='李知恩'
        </otherwise>
    </choose>
</select>
```

### 6.3、where和set标签<br>
where标签使用：<br>
```
<!--
<where>标签的作用：如果该便签包含的元素中有返回值，就插入一个where
当if条件不满足的时候，where元素中没有任何内容，所以SQL中不会出现where
-->
<select id="queryUserListByNameAndAge" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user
    <!--如果多出一个and，会自动去除，如果缺少and或者多出多个and则会报错-->
    <where>
        <if test="name!=null and name.trim()!=''">
            and name like '%${name}%'
        </if>
        <if test="age!=null">
            and age = #{age}
        </if>
    </where>
</select>
```
set标签两种使用(一般用在update语句中)：<br>
```
方式一：推荐(加上trim标签)
<!--
1、某个属性若不符合if条件则那个属性不会被更新修改
2、<trim prefix="set" suffixOverrides=",">会去除多余的逗号
3、now()表示当前时间
-->
<update id="updateUser" parameterType="com.zpc.mybatis.pojo.User">
    UPDATE tb_user
    <trim prefix="set" suffixOverrides=",">
        <if test="userName!=null">user_name = #{userName},</if>
        <if test="password!=null">password = #{password},</if>
        <if test="name!=null and name.length()>0">name = #{name},</if>
        <if test="age!=null">age = #{age},</if>
        <if test="sex!=null">sex = #{sex},</if>
	date = now(),
        <if test="birthday!=null">birthday = #{birthday},</if>
    </trim>
    where id = #{id}
</update>

方式二：
<!--
<set>标签的作用：如果该标签包含的元素中有返回值，就插入一个set
如果set后面的字符串是以逗号结尾的，就将最后这个逗号去除
-->
<update id="updateUser" parameterType="com.zpc.mybatis.pojo.User">
    UPDATE tb_user
    <set>
        <if test="userName!=null">user_name = #{userName},</if>
        <if test="password!=null">password = #{password},</if>
        <if test="name!=null and name.length()>0">name = #{name},</if>
        <if test="age!=null">age = #{age},</if>
        <if test="sex!=null">sex = #{sex},</if>
	date = now(),
        <if test="birthday!=null">birthday = #{birthday},</if>
    </set>
    where id = #{id}
</update>
```

### 6.4、foreach标签<br>

```
<select id="queryUserListByIds" resultType="com.zpc.mybatis.pojo.User">
    select * from tb_user where id in
    <foreach collection="idList" item="id" open="(" close=")" separator=",">
        #{id}
    </foreach>
</select>
```

### 6.5、trim标签<br>

```
        <where>和<set>标签都可以用trim标签实现，并且底层就是通过TrimSqlNode实现的
        
        <where>标签对应的trim实现：
            <trim prefix="where" prefixOverride="AND | OR ">
            
        <set>标签对应的trim实现：
            <trim prefix="set" suffixOverrides=",">
        
        提示：
            prefixOverride中AND和OR后面的空格不能省略，为了避免匹配到andes或
            orders等单词。实际上prefixOverride包含"AND""OR""AND\n""OR\n"
            "AND\r""OR\r""AND\t""OR\t"
            
        <trim>标签的四个属性：
            prefix：当trim元素包含内容时，会给内容增加prefix指定的前缀
            prefixOverride：当trim元素包含内容时，会把内容中匹配的前缀字符串去掉
            suffix：当trim元素包含内容时，会给内容增加prefix指定的后缀
            suffixOverride：当trim元素包含内容时，会把内容中匹配的后缀字符串去掉
```

## 七、高级查询<br>


## 八、sql语句中出现'<'的解决<br>


## 九、缓存和延迟加载<br>






## 总结：<br>
[1]https://www.cnblogs.com/diffx/p/10611082.html<br>
[2]https://blog.csdn.net/zhenwei1994/article/details/81876278<br>
[3]https://blog.csdn.net/wang852575989/article/details/100173875<br>







