---
layout:     post
title:      "数据库的密码安全存储"
subtitle:   " \"welcome to ARTAvrilLavigne Blog\""
date:       2017-12-31 12:16:00
author:     "ARTAvrilLavigne"
header-img: "img/post-bg-2015.jpg"
tags:
    - mysql
---
## 数据库如何安全存储密码  
　　**简单而言，存储bcrypt, scrypt等算法输出的内容，不要用salted hash的方式存储密码，不要用加密的方式存储密码，当然，更不要明文存储。**<br>
### 1、单向哈希  
　　将明文密码做单向哈希后存储。单向哈希算法有一个特性，无法通过哈希后的摘要(digest)恢复原始数据，这也是“单向”二字的来源，这一点和所有的加密算法都不同。常用的单向哈希算法包括SHA-256, SHA-1, MD5等。例如，对密码“passwordhunter”进行SHA-256哈希后的摘要(digest)如下：<br>
          “bbed833d2c7805c4bf039b140bec7e7452125a04efa9e0b296395a9b95c2d44c”<br>
　　可能是“单向”二字有误导性，也可能是上面那串数字唬人，不少人误以为这种方式很可靠，其实不然。<br>
  
单向哈希有两个特性：<br>
1）从同一个密码进行单向哈希，得到的总是唯一确定的摘要。<br>
2）计算速度快。随着技术进步，尤其是显卡在高性能计算中的普及，一秒钟能够完成数十亿次单向哈希计算。<br>
　　结合上面两个特点，考虑到多数人所使用的密码为常见的组合，攻击者可以将所有密码的常见组合进行单向哈希，得到一个摘要组合, 然后与数据库中的摘要进行比对即可获得对应的密码。这个摘要组合也被称为rainbow table。更糟糕的是，一个攻击者只要建立上述的rainbow table，可以匹配所有的密码数据库。仍然等同于一家“暴库”，全部遭殃。<br>
  
### 2、Salted Hash加密  
　　将明文密码混入“随机因素“，然后进行单向哈希后存储，也就是所谓的”Salted Hash”。<br> 
　　这个方式相比上面的方案，最大的好处是针对每一个数据库中的密码，都需要建立一个完整的rainbow table进行匹配。 因为两个同样使用“passwordhunter”作为密码的账户，在数据库中存储的摘要完全不同。<br>
　　10多年以前，因为计算和内存大小的限制，这个方案还是足够安全的，因为攻击者没有足够的资源建立这么多的rainbow table。 但是，在今日，因为显卡的恐怖的并行计算能力，这种攻击已经完全可行。<br>

### 3、PBKDF2,bcrypt, scrypt等算法  
　　故意增加密码计算所需耗费的资源和时间，使得任何人都不可获得足够的资源建立所需的rainbow table。<br>
　　这类方案有一个特点，算法中都有个因子，用于指明计算密码摘要所需要的资源和时间，也就是计算强度。计算强度越大，攻击者建立rainbow table越困难，以至于不可继续。<br>
这类方案的常用算法有三种：<br>
1）**PBKDF2(Password-Based Key Derivation Function)**<br>

　　PBKDF2简单而言就是将salted hash进行多次重复计算，这个次数是可选择的。如果计算一次所需要的时间是1微秒，那么计算1百万次就需要1秒钟。假如攻击一个密码所需的rainbow table有1千万条，建立所对应的rainbow table所需要的时间就是115天。这个代价足以让大部分的攻击者忘而生畏。美国政府机构已经将这个方法标准化，并且用于一些政府和军方的系统。这个方案最大的优点是标准化，实现容易同时采用了久经考验的SHA算法。<br>

2） **bcrypt**<br>

　　bcrypt是专门为密码存储而设计的算法，基于Blowfish加密算法变形而来，由Niels Provos和David Mazières发表于1999年的USENIX。<br>

　　bcrypt最大的好处是有一个参数（work factor), 可用于调整计算强度，而且work factor是包括在输出的摘要中的。随着攻击者计算能力的提高，使用者可以逐步增大work factor，而且不会影响已有用户的登陆。<br>

　　bcrypt经过了很多安全专家的仔细分析，使用在以安全著称的OpenBSD中，一般认为它比PBKDF2更能承受随着计算能力加强而带来的风险。bcrypt也有广泛的函数库支持，因此我们建议使用这种方式存储密码。<br>

3) **scrypt**<br>

　　scrypt是由著名的FreeBSD黑客Colin Percival为他的备份服务Tarsnap开发的。<br>

　　和上述两种方案不同，scrypt不仅计算所需时间长，而且占用的内存也多，使得并行计算多个摘要异常困难，因此利用rainbow table进行暴力攻击更加困难。scrypt没有在生产环境中大规模应用，并且缺乏仔细的审察和广泛的函数库支持。但是，scrypt在算法层面只要没有破绽，它的安全性应该高于PBKDF2和bcrypt。<br>
