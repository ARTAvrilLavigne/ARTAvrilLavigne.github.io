---
layout:     post
title:      "struts2中ActionContext对象理解"
subtitle:   " \"welcome to ARTAvrilLavigne Blog\""
date:       2018-03-10 10:54:00
author:     "ARTAvrilLavigne"
header-img: "img/post-bg-2015.jpg"
tags:
    - javaee
---
## 一、什么是Ognl？<br>
<p>下面我们就对OGNL这5个作用进行讲解</p>
<p>1、存取对象的任意属性，简单说就是对javabean进行操作(重要)</p>
<p>2、调用对象方法。</p>
<p>3、调用类的静态方法</p>
<p>4、索引数组元素</p>
<p>5、操作集合(重 要)</p>

## 二、OGNL的功能实现<br>
<p>操作之前必须知道如何使用OGNL表达式，并且了解OGNL表达式的取值范围只能在其context和root中，格式为</p>
<p>Ognl.getValue(expression,context,root);</p>
<p>//expression:为我们编写的ognl表达式，从后两个参数中获取值，获取规则会从下面的例子中详细讲解</p>
<p>//context:ognl的上下文，类型为map，</p>
<p>//root：ognl的根，可以为javabean、list、map、.... 等等很多值</p>

### 2.1、对javabean进行操作<br>
<p>User.java</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322135659268-1184856154.png" alt="" width="645" height="280">　</p>
<p>Address.java</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322135746127-1870365223.png" alt="" width="592" height="165"></p>
<p>&nbsp;</p>
<p>获取javabean中的属性值</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322135918205-547792496.png" alt="" width="620" height="187"></p>
<p>获取javabean中的对象的属性值</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322140445190-1132314299.png" alt="" width="598" height="188">　　　　</p>
<p>对javabean中的属性进行赋值操作</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322143822940-779664183.png" alt="" width="601" height="235"></p>
<p>　　　　　　　　　</p>

### 2.2、调用对象方法<br>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322141318627-1724796711.png" alt="" width="725" height="182">　</p>

### 2.3、调用类的静态方法或属性<br>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322142715502-424619429.png" alt="" width="743" height="300"></p>

### 2.4、索引数组元素<br>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322144119940-474810523.png" alt="" width="721" height="199"></p>

### 2.5、操作集合<br>
<p>操作list集合，list结合本质就是一个数组，所以从list中读取数据跟对数组的操作是一样的。</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322144743721-1033143089.png" alt="" width="626" height="265"></p>
<p>操作map集合</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322151723690-673688258.png" alt="" width="749" height="235"></p>
<p>创建list集合</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322145617471-1665004145.png" alt="" width="749" height="151"></p>
<p>创建map集合</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322145745533-1929003259.png" alt="" width="715" height="176"></p>

## 三、OGNL与struts2的结合<br>
<p>上面说了那么一大堆的OGNL的使用功能，我们也感受到了他的强大，啥都能取出来，表达式啥都能做，但是在struts2中它是如何使用的呢？</p>
<p>OGNL中的上下文即struts2中的actionContext</p>
<p>OGNL中的root即struts2中的valueStack</p>
<p>actionContext和valueStack是什么，他们之间什么关系？</p>

### 3.1、ActionContext和valueStack(重要)<br>
#### 3.1.1、ActionContext：<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;充当OGNL的context。是action的上下文，也可以叫做action的数据中心，本质是一个map，在其中，所有的数据都存放在这里，那其中到底存放了哪些东西呢，actionContext中存放数据的方式又是怎样的？</p>
<p>actionContext是一个map，所以其中都是以键值对的形式存储对象，如下图所示，</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request、session、application这种我们熟知的作用域，注意是作用域，而不是对象，</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paramters：这个是表单提交的参数，全部都会放到这个map中，</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attr(attributes)：三个作用域所有的属性都会放在该map下，如果有重复的，那么以request域中的为准。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VALUE_STACK：值栈，存放着valueStack对象，也就是说，通过ActionContext能够获取到valueStack。</p>
<p>如果我们使用actionContext.put();&nbsp; 那么会将该键值对直接放入到ActionContext下，</p>
<p>注意：除了request外，其他都可以直接通过getXxx()获得。而想要获取request作用域，必须通过key值的方式来获取。ActionContext.getContext().get("request"); &nbsp; 为什么这样呢？因为struts2对request进行了增强。从这里actionContext中是不能直接获取到的，request进行了怎样的增强呢？比如在actionContext中put了一个普通的key和value，该键值对并没有在request域中，但是在jsp中，通过在request域查找key，也能找到该键值对，底层进行了两步：第一步：从request域中查找数据，第二步：如果没有找到，将从值栈中执行findValue()。　　这样就解释了为什么通过ActionContext不能直接获取request，并且为什么不在request作用域中的数据，而通过在request域中查找也能够获取到。</p>
<p>　　　　　　　　　　　　</p>
<p>　　　　　<img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322161906377-141323126.png" alt="" width="288" height="460">　　<img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322165837299-1245744016.png" alt="" width="602" height="363"></p>
<p>　　　</p>

#### 3.1.2、valueStack：<br>
<p>valueStack：值栈，本质是一个ArrayList，作用，充当ognl的root，给一次请求中共享数据的功能。</p>
<p>内部图</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322171049799-1595650902.png" alt="" width="280" height="352"></p>
<p>root:源码中的名称为CompoundRoot，它也是一个栈，而每次值栈中入栈和出栈等操作其实就是对CompoundRoot进行对应的操作。</p>
<p>Context:对actionContext的引用，也就是通过valueStack也能够获取到上下文，通过getContext();</p>
<p>在我们访问一个action时，会将action加入到栈顶，也就是action会在CompoundRoot的栈顶，而我们提交的各种表单参数(充当了ognl表达式)会在valueStack从顶向下查找对应的属性进行赋值。这就是值栈的作用。</p>

**值栈的操作**<br>
<p>这里提一下，知道了值栈的内部结构图，那么就好理解了。</p>
<p>action中手动向valueStack中放数据。</p>
<p>ActionContext.getContext().getValueStack().push(xxx);　　//一般是javabean，这样放是放在root中，因为push操作是对栈进行操作，也就是对root进行操作</p>
<p>ActionContext.getContext().getValueStack().set(key,value);　　//任意值，以key-value的形式放入到了root中。</p>

**jsp获取**<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;push存放，在root下，直接使用属性获取即可</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set存放，通过属性也可以直接获得。这里要排除一个误区，就是不要觉得set方式是以键值对的方式存放，就觉得是放入了context中，并没有，还是在root中的</p>

**context操作**<br>
<p>ActionContext.getContext().put(key,value);　　//存放在actionContext中，也就是OGNL的context中</p>

**JSP获取：三种方式进行获取**<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#key获取。　　</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接使用key获取，因为值栈中也有context。只不过要从栈顶中的root开始找，然后在从context中查找</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#request获取。因为struts2对request进行了增强，如果request域中找不到，则使用findValue()，从值栈中的root开始一路往下找。</p>

### 3.2、ActionContext和valueStack的关系(重要)<br>
<p>你中有我，我中有你。</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322172358908-642293609.png" alt="" width="647" height="287"></p>
<p>也就是说，通过valueStack可以获取到actionContext，通过ActionContext也可以获取到valueStack。</p>

<p>valueStack是对root进行操作，而actionContext是对context进行操作。(root和context是OGNL中的根和上下文)</p>
<p>&nbsp;</p>

**获取值栈的方式：**<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionContext.getContext.getValueStack();//常用</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionContext.getContext.get("VALUE_STACK");</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.getAttribute("VALUE_STACK");　　　　//这个为什么可以？因为request进行了增强。详情看上面的解释。</p>

**获取actionContext的方式**<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionContext.getContext();　　//常用</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueStack.getContext();</p>

### 3.3、struts2不同的地方使用OGNL表达式获取数据<br>

#### 3.3.4、在jsp页面中<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大部分都会在这里使用，因为jsp就是显示数据的地方，在struts2中有很多s标签，通过s标签和OGNL表达式一起配置使用，就能拿到想要的数据了。而OGNL的表达式的编写在最开始就已经讲解过了，context就是actionContext，root就是valueStack，剩下表达式就看我们需要什么了。</p>

#### 3.3.5、在struts.xml中<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在struts.xml中有时候也需要用到OGNL表达式去拿一些数据。比如，在result中设置stream时，就需要从action中获取流，而action可以看成是javabean，又在栈顶，所以直接使用OGNL表达式就能够获取到，但是注意特殊的，如果在你直接编写ognl表达式时struts2不能够区分出这是ognl表达式还是普通文本，那么就需要使用${}来表明该段文本是ognl表达式</p>
<p><img src="https://images2015.cnblogs.com/blog/874710/201703/874710-20170322185422533-1790566817.png" alt="" width="961" height="264"></p>

<br>****************************************************************************************************************************************************************************************************************************<br>
<br>****************************************************************************************************************************************************************************************************************************<br>

## 一、理解Struts2中的 ValueStack<br>

　　ValueStack实际是一个接口,在Struts2中利用OGNL时，实际上使用的是实现了该接口的OgnlValueStack类,这个类是Struts2利用OGNL的基础<br>

　　ValueStack(值栈): 贯穿整个 Action 的生命周期(每个 Action 类的对象实例都拥有一个ValueStack 对象). 相当于一个数据的中转站. 在其中保存当前Action 对象和其他相关对象.<br>
　　Struts 框架把 ValueStack 对象保存在名为 “struts.valueStack” 的请求属性request中<br>

在 ValueStack 对象的内部有两个逻辑部分:<br>
　　ObjectStack: Struts  把动作和相关对象压入 ObjectStack 中--它是List结构作为栈<br>
　　ContextMap: Struts 把各种各样的映射关系(一些 Map 类型的对象) 压入 ContextMap 中<br>

Struts 会把下面这些映射压入 ContextMap 中<br>
　　parameters: 该 Map 中包含当前请求的请求参数<br>
　　request: 该 Map 中包含当前 request 对象中的所有属性<br>
　　session: 该 Map 中包含当前 session 对象中的所有属性<br>
　　application:该 Map 中包含当前 application  对象中的所有属性<br>
　　attr: 该 Map 按如下顺序来检索某个属性: request, session, application<br>

## 二、理解OGNL上下文context<br>
ActionContext提供了对ognl上下文对象中数据操作的方法.<br>
OgnlValueStack 类包含两个重要的属性:一个root和一个context。<br>
　　　　其中root本质上是一个ArrayList.<br>
　　　　而context 是一个Map（更确切的说是一个OgnlContext对象)<br>
　　在这个OgnlContext对象（context）中，有一个默认的顶层对象 _root，OGNL访问context中这个默认顶层对象中的元素时，是不需要#号的，直接通过元素的名称来进行访问，而访问其他对象时，如 request、session、attr等，则需要#号引用。<br>
　　注:Struts2将OgnlValueStack的root对象赋值给了OgnlContext 中的_root对象，在OgnlValueStack的root对象中，保存着调用Action的实例，因此，在页面上通过Struts2标签访问Action 的属性时，就不需要通过#号来引用<br>
　　总结:ognl Context包含 ObjectStack属性和ContextMap属性<br>

　　当Struts2接受一个请求时，会迅速创建ActionContext，ValueStack，action 。然后把action存放进ValueStack，所以action的实例变量可以被OGNL访问。<br>
注意： Struts2中，OGNL表达式需要配合Struts标签才可以使用。如：<s:property value="name"/><br>


## 三、总结<br>
　　struts2框架在解析OGNL表达式的时候，OGNL上下文context对象就是ActionContext对象，其相当于一个大大的容器，里面包含了根对象(valueSatck,其中valueStack对象就是值栈对象)与非根对象(application、session、parameters、attr)。<br>

　　OGNL表达式中访问root中元素时直接通过元素的名称来进行访问，不需要#号的。访问application、session、parameters等非根对象时，需要在表达式前面加上#前缀<br>
